{
  "algorithmName": "shortest-palindrome",
  "problemId": 214,
  "title": "Shortest Palindrome by Front Addition",
  "description": "Given a string s, the goal is to transform it into the shortest possible palindrome by adding characters only at the front of s.",
  "difficulty": "Hard",
  "category": "String Manipulation",
  "timeComplexity": "O(n^2)",
  "spaceComplexity": "O(n)",
  "examples": [
    {
      "input": "aacecaaa",
      "output": "aaacecaaa",
      "explanation": "Prepending 'a' makes the string a palindrome."
    }
  ],
  "problemStatement": "Given a string s, you can add characters in front of it to make it a palindrome. Find the shortest such palindrome by performing this transformation.",
  "realWorldUse": "This algorithm can be used in data validation, DNA sequence analysis, or text correction where palindromic structures are relevant.",
  "analogy": {
    "title": "Mirror Reflection Puzzle",
    "content": "Imagine you have a string of beads, and you want to create a perfect mirror image starting from the front."
  },
  "keyInsights": [
    "Reversing the string helps identify the largest palindromic prefix.",
    "Checking decreasing prefixes from the full length down to 1 ensures finding the minimal prefix to prepend.",
    "String slicing and comparison are used to verify palindrome prefixes efficiently."
  ],
  "realWorldApplications": [
    {
      "domain": "Text Processing",
      "application": "Auto-correct systems",
      "description": "Enhancing user input by automatically converting strings into palindromes."
    }
  ],
  "engineeringLessons": [
    {
      "principle": "String Reversal and Slicing",
      "lesson": "Using string reversal and slicing to efficiently compare prefixes and suffixes.",
      "application": "Optimizing string matching algorithms in text editors or search engines."
    }
  ],
  "implementations": {
    "bruteForce": {
      "title": "Naive Palindrome Construction",
      "timeComplexity": "O(n^3)",
      "spaceComplexity": "O(n)",
      "code": "function bruteForceShortestPalindrome(s) {\n  if (s === s.split('').reverse().join('')) return s;\n  for (let i = 0; i < s.length; i++) {\n    const prefix = s.slice(0, i);\n    const candidate = prefix + s;\n    if (candidate === candidate.split('').reverse().join('')) {\n      return candidate;\n    }\n  }\n  return s;\n}"
    },
    "optimized": {
      "title": "Efficient Shortest Palindrome via Reversal and Slicing",
      "timeComplexity": "O(n^2)",
      "spaceComplexity": "O(n)",
      "code": "var shortestPalindrome = function(s) {\n  const reversed = s.split('').reverse().join('');\n  for (let i = s.length; i > 0; i--) {\n    if (s.slice(0, i) === reversed.slice(s.length - i)) {\n      return reversed.slice(0, reversed.length - i) + s;\n    }\n  }\n  return '';\n};"
    }
  },
  "animationStates": [
    {
      "step": 1,
      "title": "Reverse the String",
      "description": "Create a reversed version of the input string to compare prefixes and suffixes.",
      "data": {
        "original": "aacecaaa",
        "reversed": "aaacecaa",
        "currentIndex": 0
      }
    },
    {
      "step": 2,
      "title": "Check Prefix Length 8",
      "description": "Check if the first 8 characters match the last 8 characters of reversed string.",
      "data": {
        "original": "aacecaaa",
        "reversed": "aaacecaa",
        "currentIndex": 8,
        "s_slice": "aacecaaa",
        "reversed_slice": "aaacecaa",
        "match": false
      }
    },
    {
      "step": 3,
      "title": "Check Prefix Length 7",
      "description": "Check if the first 7 characters match the last 7 characters of reversed string.",
      "data": {
        "original": "aacecaaa",
        "reversed": "aaacecaa",
        "currentIndex": 7,
        "s_slice": "aacecaa",
        "reversed_slice": "aaaceca",
        "match": false
      }
    },
    {
      "step": 4,
      "title": "Find Match at Length 1",
      "description": "Found that the first character 'a' matches the last character of reversed string.",
      "data": {
        "original": "aacecaaa",
        "reversed": "aaacecaa",
        "currentIndex": 1,
        "s_slice": "a",
        "reversed_slice": "a",
        "match": true,
        "result": "aaacecaaa"
      }
    }
  ],
  "animation": {
    "interactiveData": {
      "algorithmType": "String Comparison",
      "dataStructure": "Strings",
      "keyOperations": [
        "reverse",
        "slice",
        "compare"
      ],
      "visualizationHints": "Highlight matching prefixes and suffixes, animate reversal and slicing steps."
    }
  },
  "metadata": {
    "tags": [
      "string",
      "palindrome",
      "string manipulation",
      "optimization"
    ],
    "acceptanceRate": "45.0%",
    "frequency": 78
  },
  "estimatedTime": "10-15 minutes",
  "popularity": 85,
  "id": "shortest-palindrome",
  "createdAt": 1758385570974,
  "lastModified": 1758385570974
}